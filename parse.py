import requests
import pprint
import json
import os
import time

# Запоминаем время(для подсчета времени выполнения кода)
curr_time = time.time()
# Название файла
FILE_NAME = 'parse.json'
# Список под результат парсинга
parse_result = []

# Если файл существует
if os.path.exists(FILE_NAME):
    # То читаем его
    with open(FILE_NAME, 'r') as f:
        # И записываем в переменную parse_result,
        # В последствии туда будем добавлять результат нового поиска если он не первый
        parse_result = json.load(f)

# Url API headhunter
URL = 'https://api.hh.ru/'
# Искать будем в вакансиях
url_vacancies = f'{URL}vacancies'
# Слова которые будем искать
keywords = 'Python'
# Параметры поиска
# 'id': '66', 'name': 'Нижний Новгород', 'parent_id': '1679'
# Если хотим сделать поиск по определенному региону то указываем, если нет то None
area = None # '1679'
params = {
    'text': keywords,
    'area': area
}
# Отправляем запрос(ответ сразу преобразуем в json)
result = requests.get(url_vacancies, params=params).json()
# Запоминаем сколько страниц
pages = result['pages']

# Список под скилы
list_skills = []
# Счетчик для посчета обработанных вакансий
count = 0
# Счетчик для подсчета количества указанных в вакансии нижних границ зарплаты
# Для подсчета среднего значения зарплаты, по верхней или нижней границе
# Будем учитывать только те, суммы которых были добавленны,
# А не по общему количеству обработынных вакансий
count_salary_down = 0
# Счетчик для подсчета количества указанных в вакансии верхних границ зарклаты
count_salary_up = 0
# Словарь для подсчета средней зарплаты если указана(нижней и верхней границы)
salary = {'down': 0, 'up': 0}

# Проходим по страницам
for page in range(pages):
    # Ограничитель для обработанных страниц(в данном случае будут обработанны 4 страницы)
    if page > 10:
        break
    # Сообщение о том какая страница обрабатывается
    print(f'Обрабатывается {page + 1} страница')
    # Формируем параметры запроса
    params = {
        'text': keywords,
        'page': page,
        'area': area
    }
    # Отправляем запрос(ответ сразу преобразуем в json)
    results = requests.get(url_vacancies, params=params).json()
    # Проходим по result['items'](там находятся найденные вакансии)
    for item in results['items']:
        # Инкремент счетчика количества обработанных вакансий
        count += 1
        # Берем api url вакансии(он более информативен, чем описание вакансии в items)
        vacancy_url = item['url']
        # Отправляем запрос(параметры не обязательны т.к. обращаемся к конкретной вакансии уже)
        result = requests.get(vacancy_url).json()

        # Подсчет скилов(требований)
        # Проходим в цикле по каждому скилу указаному в вакансии
        for skill in result['key_skills']:
            # Если скила нет в нашем списке из словарей со скилами
            # Список для проверки генерируем путем прохождения по нашему списку со словарями и беря название)
            if skill['name'] not in [sk['name'] for sk in list_skills]:
                # Создаем словарь с названием, количеством и процентами
                skills = {
                    # Добавляем в качестве значения название скила
                    'name': skill['name'],
                    # Количество при первом создании всегда 1
                    'count': 1,
                    # Проценты будем считать в конце, пока 0
                    'persent': 0
                }
                # Добавляем словарь в список со скилами
                list_skills.append(skills)
            else:  # Иначе
                # Проходим по нашему списку словарей
                for sk in list_skills:
                    # Если название скила из вакансии совпадает с названием из нашего списка
                    if skill['name'] == sk['name']:
                        # Увеличиваем количество на 1
                        sk['count'] += 1
        # Salary
        # Если зарплата не None, т.е. указана
        if result['salary'] is not None:
            # Если указана зарклата в рублях
            if result['salary']['currency'] == 'RUR':
                # Если пункт 'from'(от) не None
                if result['salary']['from'] is not None:
                    # Увеличиваем счетчик нижней границы зарплаты
                    # Это делается для того, чтобы среднее значение считать только от добавленных, а не от всех
                    count_salary_down += 1
                    # Добавляем к нижнему пределу
                    salary['down'] += result['salary']['from']
                # Если пункт 'to'(до) не None
                if result['salary']['to'] is not None:
                    # Увеличиваем счетчик верхней границы зарплаты
                    count_salary_up += 1
                    # Добавляем к верхнему пределу
                    salary['up'] += result['salary']['to']
    # Сообщение сколько вакансий обработано 
    print(f'{count} вакансий обработано')
    # Разделитель между циклами обработки страниц
    print('*' * 100)

# После того как вакансии обработанны и требуемые скилы собранны в список со словарями этих скилов(требований)
# А указанные зарплаты нижней и верхней границ суммированы и подсчитано их количество

# Считаем среднее по нижней границе з/п(от ковичества указанных нижних границ зарплаты)
salary['down'] = round(salary['down'] / count_salary_down)
# Считаем среднее по верхней границе з/п(от ковичества указанных верхних границ зарплаты)
salary['up'] = round(salary['up'] / count_salary_up)

# Отсортируем список со словарями по количеству каждого скила
list_skills = sorted(list_skills, key=lambda x: x['count'], reverse=True)
# Можно после этого еще отобрать первые 10 отсортированных по количеству
list_skills = list_skills[:15]

# Считаем процент по количеству скилов относительно количества всех скилов
# Проходим по всем скилам
for skl in list_skills:
    # Считаем процент очередного скила относительно количества всех скилов
    skl['persent'] = round(skl['count'] * 100 / sum([i['count'] for i in list_skills]), 1)

# Создаем словарь для результатов
res = {
    # Слова которые указаны в поиске
    'keywords': keywords,
    # Количество обработанных вакансий
    'count': count,
    # Регион где происходил поиск
    'area': area,
    # Средняя зарплата(нижняя и верхняя границы)
    'mean_salary': salary,
    # Скилы(требования) - список со словарями по каждому требованию(название, количестко. процент)
    'requirements': list_skills
}

# Добавляем словарь в общий список с результатами
parse_result.append(res)

# Сохраняем в файл json
with open(FILE_NAME, 'w') as f:
    json.dump(parse_result, f)

# Выводим время выполнения всего кода
print(f'Время выполнения {round(time.time() - curr_time, 1)}с.')

pprint.pprint(parse_result)

